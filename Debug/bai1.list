
bai1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000edc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001070  08001070  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001070  08001070  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001070  08001070  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001070  08001070  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000014  0800108c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800108c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000607e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000144b  00000000  00000000  000260c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00027510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00027b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c593  00000000  00000000  000280e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005815  00000000  00000000  0003467b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00044b73  00000000  00000000  00039e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007ea03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b4  00000000  00000000  0007ea58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001058 	.word	0x08001058

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08001058 	.word	0x08001058

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	2300      	movs	r3, #0
 80003f6:	73bb      	strb	r3, [r7, #14]
 80003f8:	230f      	movs	r3, #15
 80003fa:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d039      	beq.n	8000478 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <NVIC_Init+0xbc>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	43db      	mvns	r3, r3
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800041c:	7b7a      	ldrb	r2, [r7, #13]
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	fa42 f303 	asr.w	r3, r2, r3
 8000424:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	461a      	mov	r2, r3
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789a      	ldrb	r2, [r3, #2]
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4313      	orrs	r3, r2
 8000442:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <NVIC_Init+0xc0>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000460:	4911      	ldr	r1, [pc, #68]	; (80004a8 <NVIC_Init+0xc0>)
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	0952      	lsrs	r2, r2, #5
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800046c:	2201      	movs	r2, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000472:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000476:	e00f      	b.n	8000498 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <NVIC_Init+0xc0>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	0952      	lsrs	r2, r2, #5
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800048c:	2201      	movs	r2, #1
 800048e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000490:	f100 0320 	add.w	r3, r0, #32
 8000494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	e000e100 	.word	0xe000e100

080004ac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e076      	b.n	80005b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004c8:	2201      	movs	r2, #1
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d165      	bne.n	80005b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	4619      	mov	r1, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d003      	beq.n	8000522 <GPIO_Init+0x76>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d12e      	bne.n	8000580 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	4619      	mov	r1, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	b29b      	uxth	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	2301      	movs	r3, #1
 800055c:	408b      	lsls	r3, r1
 800055e:	43db      	mvns	r3, r3
 8000560:	401a      	ands	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	7992      	ldrb	r2, [r2, #6]
 800056e:	4611      	mov	r1, r2
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	b292      	uxth	r2, r2
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	b292      	uxth	r2, r2
 800057a:	431a      	orrs	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	b29b      	uxth	r3, r3
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	4619      	mov	r1, r3
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d985      	bls.n	80004c8 <GPIO_Init+0x1c>
    }
  }
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	371c      	adds	r7, #28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	691a      	ldr	r2, [r3, #16]
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	4013      	ands	r3, r2
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e001      	b.n	80005f0 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	831a      	strh	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	887a      	ldrh	r2, [r7, #2]
 800062c:	835a      	strh	r2, [r3, #26]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
 8000646:	4613      	mov	r3, r2
 8000648:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000652:	787a      	ldrb	r2, [r7, #1]
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3208      	adds	r2, #8
 800066e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	f003 0307 	and.w	r3, r3, #7
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	210f      	movs	r1, #15
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	8879      	ldrh	r1, [r7, #2]
 8000684:	08c9      	lsrs	r1, r1, #3
 8000686:	b289      	uxth	r1, r1
 8000688:	4608      	mov	r0, r1
 800068a:	ea02 0103 	and.w	r1, r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f100 0208 	add.w	r2, r0, #8
 8000694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	b29b      	uxth	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3208      	adds	r2, #8
 80006a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3208      	adds	r2, #8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e2:	4909      	ldr	r1, [pc, #36]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006ea:	e006      	b.n	80006fa <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	43db      	mvns	r3, r3
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006f6:	4013      	ands	r3, r2
 80006f8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 8000720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000722:	4909      	ldr	r1, [pc, #36]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800072a:	e006      	b.n	800073a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 800072e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	43db      	mvns	r3, r3
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 8000736:	4013      	ands	r3, r2
 8000738:	640b      	str	r3, [r1, #64]	; 0x40
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d006      	beq.n	800076c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <RCC_APB2PeriphClockCmd+0x3c>)
 8000760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000762:	4909      	ldr	r1, [pc, #36]	; (8000788 <RCC_APB2PeriphClockCmd+0x3c>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4313      	orrs	r3, r2
 8000768:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800076a:	e006      	b.n	800077a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <RCC_APB2PeriphClockCmd+0x3c>)
 800076e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	43db      	mvns	r3, r3
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <RCC_APB2PeriphClockCmd+0x3c>)
 8000776:	4013      	ands	r3, r2
 8000778:	644b      	str	r3, [r1, #68]	; 0x44
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80007a0:	89fb      	ldrh	r3, [r7, #14]
 80007a2:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80007a6:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	885b      	ldrh	r3, [r3, #2]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007d8:	4313      	orrs	r3, r2
 80007da:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	89fa      	ldrh	r2, [r7, #14]
 80007ee:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	8b9b      	ldrh	r3, [r3, #28]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	8a1a      	ldrh	r2, [r3, #16]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	821a      	strh	r2, [r3, #16]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d008      	beq.n	8000838 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000830:	b29a      	uxth	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000836:	e007      	b.n	8000848 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000842:	b29a      	uxth	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	801a      	strh	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	899b      	ldrh	r3, [r3, #12]
 8000860:	b29b      	uxth	r3, r3
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	887a      	ldrh	r2, [r7, #2]
 800087e:	819a      	strh	r2, [r3, #12]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
 8000898:	4613      	mov	r3, r2
 800089a:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800089c:	2300      	movs	r3, #0
 800089e:	81fb      	strh	r3, [r7, #14]
 80008a0:	2300      	movs	r3, #0
 80008a2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	091b      	lsrs	r3, r3, #4
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80008b6:	78bb      	ldrb	r3, [r7, #2]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d008      	beq.n	80008ce <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	89bb      	ldrh	r3, [r7, #12]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80008cc:	e009      	b.n	80008e2 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	889b      	ldrh	r3, [r3, #4]
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	89bb      	ldrh	r3, [r7, #12]
 80008d6:	43db      	mvns	r3, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4013      	ands	r3, r2
 80008dc:	b29a      	uxth	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	809a      	strh	r2, [r3, #4]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	891b      	ldrh	r3, [r3, #8]
 8000902:	b29a      	uxth	r2, r3
 8000904:	887b      	ldrh	r3, [r7, #2]
 8000906:	4013      	ands	r3, r2
 8000908:	b29b      	uxth	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e001      	b.n	8000918 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	460b      	mov	r3, r1
 8000930:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	81bb      	strh	r3, [r7, #12]
 800093a:	2300      	movs	r3, #0
 800093c:	817b      	strh	r3, [r7, #10]
 800093e:	2300      	movs	r3, #0
 8000940:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	f003 030f 	and.w	r3, r3, #15
 8000948:	2201      	movs	r2, #1
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	091b      	lsrs	r3, r3, #4
 8000954:	b2db      	uxtb	r3, r3
 8000956:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8000958:	897b      	ldrh	r3, [r7, #10]
 800095a:	2201      	movs	r2, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	889b      	ldrh	r3, [r3, #4]
 8000966:	b29a      	uxth	r2, r3
 8000968:	897b      	ldrh	r3, [r7, #10]
 800096a:	4013      	ands	r3, r2
 800096c:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	891b      	ldrh	r3, [r3, #8]
 8000972:	b29a      	uxth	r2, r3
 8000974:	89bb      	ldrh	r3, [r7, #12]
 8000976:	4013      	ands	r3, r2
 8000978:	b29b      	uxth	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <SPI_I2S_GetITStatus+0x64>
 800097e:	893b      	ldrh	r3, [r7, #8]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	e001      	b.n	800098e <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	2201      	movs	r2, #1
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	43db      	mvns	r3, r3
 80009be:	b29a      	uxth	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	811a      	strh	r2, [r3, #8]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	889b      	ldrh	r3, [r3, #4]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009e2:	b29b      	uxth	r3, r3
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a0c:	887b      	ldrh	r3, [r7, #2]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	095b      	lsrs	r3, r3, #5
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	f003 031f 	and.w	r3, r3, #31
 8000a1c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d107      	bne.n	8000a3e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	899b      	ldrh	r3, [r3, #12]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e011      	b.n	8000a62 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d107      	bne.n	8000a54 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	8a1b      	ldrh	r3, [r3, #16]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e006      	b.n	8000a62 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	8a9b      	ldrh	r3, [r3, #20]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d005      	beq.n	8000a94 <USART_GetITStatus+0xa4>
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	74fb      	strb	r3, [r7, #19]
 8000a92:	e001      	b.n	8000a98 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	371c      	adds	r7, #28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b085      	sub	sp, #20
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	81fb      	strh	r3, [r7, #14]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000aca:	89bb      	ldrh	r3, [r7, #12]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	801a      	strh	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Handler+0x18>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <SysTick_Handler+0x18>)
 8000aec:	6013      	str	r3, [r2, #0]
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	20000030 	.word	0x20000030

08000afc <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b02:	b672      	cpsid	i
}
 8000b04:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000b06:	f240 5125 	movw	r1, #1317	; 0x525
 8000b0a:	480f      	ldr	r0, [pc, #60]	; (8000b48 <USART2_IRQHandler+0x4c>)
 8000b0c:	f7ff ff70 	bl	80009f0 <USART_GetITStatus>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d112      	bne.n	8000b3c <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <USART2_IRQHandler+0x50>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <USART2_IRQHandler+0x4c>)
 8000b1e:	f7ff ff57 	bl	80009d0 <USART_ReceiveData>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000b28:	1cfb      	adds	r3, r7, #3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f822 	bl	8000b76 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000b32:	f240 5125 	movw	r1, #1317	; 0x525
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <USART2_IRQHandler+0x4c>)
 8000b38:	f7ff ffb5 	bl	8000aa6 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b3c:	b662      	cpsie	i
}
 8000b3e:	bf00      	nop
    }
    __enable_irq();
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	20000034 	.word	0x20000034

08000b50 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	885a      	ldrh	r2, [r3, #2]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	bf2c      	ite	cs
 8000b64:	2301      	movcs	r3, #1
 8000b66:	2300      	movcc	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e021      	b.n	8000bce <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	441a      	add	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	88c9      	ldrh	r1, [r1, #6]
 8000b98:	440b      	add	r3, r1
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	88db      	ldrh	r3, [r3, #6]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	885b      	ldrh	r3, [r3, #2]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	791b      	ldrb	r3, [r3, #4]
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d3d8      	bcc.n	8000b8a <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ffb9 	bl	8000b50 <bufIsFull>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d011      	beq.n	8000c08 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	891a      	ldrh	r2, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c08:	b662      	cpsie	i
}
 8000c0a:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <main>:

uint16_t Recive_Data;

//------------------------------------------------------------------------------
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

	AppInitCommon();
 8000c1e:	f000 f839 	bl	8000c94 <AppInitCommon>

	while(1)
	{
		//Send data when Button pressed-----------------------------------------
		if(GPIO_ReadInputDataBit(GPIOC, Pin_Button) == GPIO_PIN_LOW)
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <main+0x6c>)
 8000c28:	f7ff fccf 	bl	80005ca <GPIO_ReadInputDataBit>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <main+0x22>
		{
			Send_Data(SPI2, 0xB1);
 8000c32:	21b1      	movs	r1, #177	; 0xb1
 8000c34:	4814      	ldr	r0, [pc, #80]	; (8000c88 <main+0x70>)
 8000c36:	f000 f83b 	bl	8000cb0 <Send_Data>

		}
		//Turn on led when data = 0x20------------------------------------------
		if (Recive_Data == Check_DataSlave)
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <main+0x74>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c40:	d11b      	bne.n	8000c7a <main+0x62>
		{

		    for (int i = 0; i<5; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	e012      	b.n	8000c6e <main+0x56>
		    {
		    	GPIO_SetBits(GPIOA, GPIO_PIN_LED);
 8000c48:	2120      	movs	r1, #32
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <main+0x78>)
 8000c4c:	f7ff fcd7 	bl	80005fe <GPIO_SetBits>
		    	Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f000 f860 	bl	8000d18 <Delay>
		    	GPIO_ResetBits(GPIOA, GPIO_PIN_LED);
 8000c58:	2120      	movs	r1, #32
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <main+0x78>)
 8000c5c:	f7ff fcde 	bl	800061c <GPIO_ResetBits>
		    	Delay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f000 f858 	bl	8000d18 <Delay>
		    for (int i = 0; i<5; i++)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	dde9      	ble.n	8000c48 <main+0x30>
		    }
		    Recive_Data = 0;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <main+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	801a      	strh	r2, [r3, #0]
		}
		GPIO_ResetBits(GPIOA, GPIO_PIN_LED);
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <main+0x78>)
 8000c7e:	f7ff fccd 	bl	800061c <GPIO_ResetBits>
		if(GPIO_ReadInputDataBit(GPIOC, Pin_Button) == GPIO_PIN_LOW)
 8000c82:	e7ce      	b.n	8000c22 <main+0xa>
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40003800 	.word	0x40003800
 8000c8c:	2000003c 	.word	0x2000003c
 8000c90:	40020000 	.word	0x40020000

08000c94 <AppInitCommon>:
 * @param  None
 * @retval None
 */
static
void AppInitCommon(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	//System_Clock--------------------------------------------------------------
	SystemCoreClockUpdate();
 8000c98:	f7ff fad2 	bl	8000240 <SystemCoreClockUpdate>

	//Button_Init---------------------------------------------------------------
	Button_Init();
 8000c9c:	f000 f878 	bl	8000d90 <Button_Init>

	//Led Init------------------------------------------------------------------
	Led_Init();
 8000ca0:	f000 f85a 	bl	8000d58 <Led_Init>

	//SPI_Master_Init-----------------------------------------------------------
	SPI_InitMaster();
 8000ca4:	f000 f890 	bl	8000dc8 <SPI_InitMaster>

	//SPI_Slave_Init------------------------------------------------------------
	SPI_InitSlave();
 8000ca8:	f000 f8ec 	bl	8000e84 <SPI_InitSlave>

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <Send_Data>:
 * @param  None
 * @retval None
 */
static
void Send_Data(SPI_TypeDef * SPIx, uint8_t data)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
	//Allow Send Data to Slave--------------------------------------------------
	GPIO_ResetBits(SPI_Master_GPIO, Pin_NSS);
 8000cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <Send_Data+0x44>)
 8000cc2:	f7ff fcab 	bl	800061c <GPIO_ResetBits>

	SPI_I2S_SendData(SPIx,data);
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fdce 	bl	800086e <SPI_I2S_SendData>

	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET){;}
 8000cd2:	bf00      	nop
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe09 	bl	80008ee <SPI_I2S_GetFlagStatus>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d0f8      	beq.n	8000cd4 <Send_Data+0x24>

	//Allow Send Data to Slave--------------------------------------------------
	GPIO_SetBits (SPI_Master_GPIO, Pin_NSS);
 8000ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce6:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <Send_Data+0x44>)
 8000ce8:	f7ff fc89 	bl	80005fe <GPIO_SetBits>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <Revice_Data_Slave>:
 * @param  None
 * @retval None
 */
static
uint8_t Revice_Data_Slave(SPI_TypeDef * SPIx)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	uint8_t Data_Revice = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]

	Data_Revice = SPI_I2S_ReceiveData(SPIx);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fda5 	bl	8000854 <SPI_I2S_ReceiveData>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]

	return Data_Revice;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <Delay>:
 * @param  None
 * @retval None
 */
static
void Delay(uint32_t ms)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for (i = 0 ; i < ms ; i ++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e00d      	b.n	8000d42 <Delay+0x2a>
	{
		for (j = 0; j<5000; j++){;}
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	e002      	b.n	8000d32 <Delay+0x1a>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d9f7      	bls.n	8000d2c <Delay+0x14>
	for (i = 0 ; i < ms ; i ++)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3ed      	bcc.n	8000d26 <Delay+0xe>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <Led_Init>:
 * @param  None
 * @retval None
 */
static
void Led_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fcb3 	bl	80006cc <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED;
 8000d66:	2320      	movs	r3, #32
 8000d68:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d72:	2300      	movs	r3, #0
 8000d74:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
 8000d76:	2302      	movs	r3, #2
 8000d78:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <Led_Init+0x34>)
 8000d80:	f7ff fb94 	bl	80004ac <GPIO_Init>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020000 	.word	0x40020000

08000d90 <Button_Init>:
 * @param  None
 * @retval None
 */
static
void Button_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure ;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8000d96:	2101      	movs	r1, #1
 8000d98:	2004      	movs	r0, #4
 8000d9a:	f7ff fc97 	bl	80006cc <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000da2:	2303      	movs	r3, #3
 8000da4:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8000da6:	2301      	movs	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = Button;
 8000daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dae:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000db0:	463b      	mov	r3, r7
 8000db2:	4619      	mov	r1, r3
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <Button_Init+0x34>)
 8000db6:	f7ff fb79 	bl	80004ac <GPIO_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <SPI_InitMaster>:
 * @param  None
 * @retval None
 */
static
void SPI_InitMaster(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef    GPIO_InitStructure;
	SPI_InitTypeDef     SPI_InitStructure;


	//Connect Clock to GPIOB---------------------------------------------------
	RCC_AHB1PeriphClockCmd(SPI_Master_GPIO_Clock, ENABLE);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff fc7b 	bl	80006cc <RCC_AHB1PeriphClockCmd>

	//Initialization GPIO Use For SPI------------------------------------------
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000dde:	2300      	movs	r3, #0
 8000de0:	77bb      	strb	r3, [r7, #30]

	GPIO_InitStructure.GPIO_Pin = SCK_Master | MISO_Master | MOSI_Master;
 8000de2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000de6:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Master_GPIO, &GPIO_InitStructure);
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4823      	ldr	r0, [pc, #140]	; (8000e7c <SPI_InitMaster+0xb4>)
 8000df0:	f7ff fb5c 	bl	80004ac <GPIO_Init>

	//Connect SPI1 pins to SPI Alternate Function------------------------------
	GPIO_PinAFConfig(SPI_Master_GPIO, GPIO_PinSource13, GPIO_AF_SPI2);
 8000df4:	2205      	movs	r2, #5
 8000df6:	210d      	movs	r1, #13
 8000df8:	4820      	ldr	r0, [pc, #128]	; (8000e7c <SPI_InitMaster+0xb4>)
 8000dfa:	f7ff fc1e 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Master_GPIO, GPIO_PinSource14, GPIO_AF_SPI2);
 8000dfe:	2205      	movs	r2, #5
 8000e00:	210e      	movs	r1, #14
 8000e02:	481e      	ldr	r0, [pc, #120]	; (8000e7c <SPI_InitMaster+0xb4>)
 8000e04:	f7ff fc19 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Master_GPIO, GPIO_PinSource15, GPIO_AF_SPI2);
 8000e08:	2205      	movs	r2, #5
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	481b      	ldr	r0, [pc, #108]	; (8000e7c <SPI_InitMaster+0xb4>)
 8000e0e:	f7ff fc14 	bl	800063a <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000e12:	2301      	movs	r3, #1
 8000e14:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e16:	2302      	movs	r3, #2
 8000e18:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = NSS_Master;
 8000e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e26:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Master_GPIO, &GPIO_InitStructure);
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <SPI_InitMaster+0xb4>)
 8000e30:	f7ff fb3c 	bl	80004ac <GPIO_Init>

	//Enable peripheral clock--------------------------------------------------
	RCC_APB1PeriphClockCmd(SPI_Master_Clock, ENABLE);
 8000e34:	2101      	movs	r1, #1
 8000e36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e3a:	f7ff fc67 	bl	800070c <RCC_APB1PeriphClockCmd>

	//Set to full duplex mode, seperate MOSI and MISO lines--------------------
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	80bb      	strh	r3, [r7, #4]

	//Transmit in master mode--------------------------------------------------
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000e42:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e46:	80fb      	strh	r3, [r7, #6]

	//One packet of data is 8 bits wide----------------------------------------
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	813b      	strh	r3, [r7, #8]

	//Clock is low when idle---------------------------------------------------
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	817b      	strh	r3, [r7, #10]

	//Data sampled at first edge-----------------------------------------------
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000e50:	2300      	movs	r3, #0
 8000e52:	81bb      	strh	r3, [r7, #12]

	//Set NSS us software------------------------------------------------------
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft ;
 8000e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e58:	81fb      	strh	r3, [r7, #14]

	//SPI frequency is APB2 frequency / 4-------------------------------------
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	823b      	strh	r3, [r7, #16]

	//Data is transmitted LSB first--------------------------------------------
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	827b      	strh	r3, [r7, #18]

	SPI_Init(SPI_Master, &SPI_InitStructure);
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <SPI_InitMaster+0xb8>)
 8000e68:	f7ff fc90 	bl	800078c <SPI_Init>

	//Enable SPI2--------------------------------------------------------------
	SPI_Cmd(SPI_Master, ENABLE);
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <SPI_InitMaster+0xb8>)
 8000e70:	f7ff fcd0 	bl	8000814 <SPI_Cmd>

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40003800 	.word	0x40003800

08000e84 <SPI_InitSlave>:
 * @param  None
 * @retval None
 */
static
void SPI_InitSlave(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef    GPIO_InitStructure;
	SPI_InitTypeDef     SPI_InitStructure;
	NVIC_InitTypeDef    NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(SPI_Salve_GPIO_Clock, ENABLE);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fc1d 	bl	80006cc <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2002      	movs	r0, #2
 8000e96:	f7ff fc19 	bl	80006cc <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = MISO_Slave | MOSI_Slave;
 8000eaa:	23c0      	movs	r3, #192	; 0xc0
 8000eac:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Salve_GPIO, &GPIO_InitStructure);
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4831      	ldr	r0, [pc, #196]	; (8000f7c <SPI_InitSlave+0xf8>)
 8000eb6:	f7ff faf9 	bl	80004ac <GPIO_Init>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = SCK_Slave;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	482a      	ldr	r0, [pc, #168]	; (8000f80 <SPI_InitSlave+0xfc>)
 8000ed6:	f7ff fae9 	bl	80004ac <GPIO_Init>


	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
 8000eda:	2205      	movs	r2, #5
 8000edc:	2103      	movs	r1, #3
 8000ede:	4828      	ldr	r0, [pc, #160]	; (8000f80 <SPI_InitSlave+0xfc>)
 8000ee0:	f7ff fbab 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Salve_GPIO, GPIO_PinSource6, GPIO_AF_SPI1);
 8000ee4:	2205      	movs	r2, #5
 8000ee6:	2106      	movs	r1, #6
 8000ee8:	4824      	ldr	r0, [pc, #144]	; (8000f7c <SPI_InitSlave+0xf8>)
 8000eea:	f7ff fba6 	bl	800063a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Salve_GPIO, GPIO_PinSource7, GPIO_AF_SPI1);
 8000eee:	2205      	movs	r2, #5
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	4822      	ldr	r0, [pc, #136]	; (8000f7c <SPI_InitSlave+0xf8>)
 8000ef4:	f7ff fba1 	bl	800063a <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000efc:	2302      	movs	r3, #2
 8000efe:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8000f00:	2301      	movs	r3, #1
 8000f02:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = NSS_Slave;
 8000f04:	2310      	movs	r3, #16
 8000f06:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Salve_GPIO, &GPIO_InitStructure);
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481b      	ldr	r0, [pc, #108]	; (8000f7c <SPI_InitSlave+0xf8>)
 8000f10:	f7ff facc 	bl	80004ac <GPIO_Init>

	//enable peripheral clock SPI1---------------------------------------------
	RCC_APB2PeriphClockCmd(SPI_Salve_Clock, ENABLE);
 8000f14:	2101      	movs	r1, #1
 8000f16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f1a:	f7ff fc17 	bl	800074c <RCC_APB2PeriphClockCmd>

	// set to full duplex mode, seperate MOSI and MISO lines-------------------
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	80bb      	strh	r3, [r7, #4]

	//Use SPI1 as slave mode---------------------------------------------------
	SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8000f22:	2300      	movs	r3, #0
 8000f24:	80fb      	strh	r3, [r7, #6]

	//One packet of data is 8 bits wide----------------------------------------
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000f26:	2300      	movs	r3, #0
 8000f28:	813b      	strh	r3, [r7, #8]

	//Clock is low when idle---------------------------------------------------
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	817b      	strh	r3, [r7, #10]

	//Data sampled at first edge-----------------------------------------------
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	81bb      	strh	r3, [r7, #12]

	//SPI frequency is APB2 frequency / 4--------------------------------------
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8000f32:	2308      	movs	r3, #8
 8000f34:	823b      	strh	r3, [r7, #16]

	//Set NSS us software------------------------------------------------------
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3a:	81fb      	strh	r3, [r7, #14]

	//data is transmitted MSB first--------------------------------------------
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	827b      	strh	r3, [r7, #18]


	SPI_Init(SPI_Slave, &SPI_InitStructure);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <SPI_InitSlave+0x100>)
 8000f46:	f7ff fc21 	bl	800078c <SPI_Init>

	//Enable SPI1--------------------------------------------------------------
	SPI_Cmd(SPI_Slave, ENABLE);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <SPI_InitSlave+0x100>)
 8000f4e:	f7ff fc61 	bl	8000814 <SPI_Cmd>

	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8000f52:	2323      	movs	r3, #35	; 0x23
 8000f54:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	70fb      	strb	r3, [r7, #3]

	NVIC_Init(&NVIC_InitStructure);
 8000f62:	463b      	mov	r3, r7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fa3f 	bl	80003e8 <NVIC_Init>

	SPI_ITConfig(SPI_Slave, SPI_I2S_IT_RXNE, ENABLE);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2160      	movs	r1, #96	; 0x60
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <SPI_InitSlave+0x100>)
 8000f70:	f7ff fc8c 	bl	800088c <SPI_I2S_ITConfig>



}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40013000 	.word	0x40013000

08000f88 <SPI1_IRQHandler>:
 * @brief  SPI1_IRQHandler
 * @param  None
 * @retval None
 */
void SPI1_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	if(SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) == SET)
 8000f8c:	2160      	movs	r1, #96	; 0x60
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <SPI1_IRQHandler+0x2c>)
 8000f90:	f7ff fcc9 	bl	8000926 <SPI_I2S_GetITStatus>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d106      	bne.n	8000fa8 <SPI1_IRQHandler+0x20>
	{
		Recive_Data = Revice_Data_Slave(SPI1);
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <SPI1_IRQHandler+0x2c>)
 8000f9c:	f7ff feac 	bl	8000cf8 <Revice_Data_Slave>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SPI1_IRQHandler+0x30>)
 8000fa6:	801a      	strh	r2, [r3, #0]
	}

	SPI_I2S_ClearITPendingBit(SPI1, SPI_I2S_IT_RXNE);
 8000fa8:	2160      	movs	r1, #96	; 0x60
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <SPI1_IRQHandler+0x2c>)
 8000fac:	f7ff fcf6 	bl	800099c <SPI_I2S_ClearITPendingBit>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40013000 	.word	0x40013000
 8000fb8:	2000003c 	.word	0x2000003c

08000fbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fbe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fc0:	f7ff f908 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fea:	f000 f811 	bl	8001010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fe13 	bl	8000c18 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   r0, =_estack
 8000ff4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001000:	08001078 	.word	0x08001078
  ldr r2, =_sbss
 8001004:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001008:	20000040 	.word	0x20000040

0800100c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <__libc_init_array>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	4d0d      	ldr	r5, [pc, #52]	; (8001048 <__libc_init_array+0x38>)
 8001014:	4c0d      	ldr	r4, [pc, #52]	; (800104c <__libc_init_array+0x3c>)
 8001016:	1b64      	subs	r4, r4, r5
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	2600      	movs	r6, #0
 800101c:	42a6      	cmp	r6, r4
 800101e:	d109      	bne.n	8001034 <__libc_init_array+0x24>
 8001020:	4d0b      	ldr	r5, [pc, #44]	; (8001050 <__libc_init_array+0x40>)
 8001022:	4c0c      	ldr	r4, [pc, #48]	; (8001054 <__libc_init_array+0x44>)
 8001024:	f000 f818 	bl	8001058 <_init>
 8001028:	1b64      	subs	r4, r4, r5
 800102a:	10a4      	asrs	r4, r4, #2
 800102c:	2600      	movs	r6, #0
 800102e:	42a6      	cmp	r6, r4
 8001030:	d105      	bne.n	800103e <__libc_init_array+0x2e>
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	f855 3b04 	ldr.w	r3, [r5], #4
 8001038:	4798      	blx	r3
 800103a:	3601      	adds	r6, #1
 800103c:	e7ee      	b.n	800101c <__libc_init_array+0xc>
 800103e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001042:	4798      	blx	r3
 8001044:	3601      	adds	r6, #1
 8001046:	e7f2      	b.n	800102e <__libc_init_array+0x1e>
 8001048:	08001070 	.word	0x08001070
 800104c:	08001070 	.word	0x08001070
 8001050:	08001070 	.word	0x08001070
 8001054:	08001074 	.word	0x08001074

08001058 <_init>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr

08001064 <_fini>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr
